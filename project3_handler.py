#Udit Kaushik
#75825974
#project3_handler.py

import json
import urllib.parse
import urllib.request

#Hardcoded global var because the api key should never change.
MAPQUEST_API_KEY = 'TKgV8bFEgeHdzAvErUm2CtAyQ1OGm0yM'

def complete_url(base_url: str, location: list, class_key: str) -> str:
    """
    Generates the complete url with the wanted query parameters for the distance api.
    """
    query_parameters = [
        ('key', MAPQUEST_API_KEY),
        ('from', location[0])
    ]

    for i in range(1, len(location)):
        query_parameters.append(('to', location[i]))

    return base_url + class_key + urllib.parse.urlencode(query_parameters)

def get_latlong_list(results: dict) -> list:
    """
    Takes the api data of each individual loction and returns the coordinates
    in a list for elevation url function to loop through.
    """
    try:
        latlong_list = []
        for i in range(len(results['route']['locations'])):
            latlong_list.append(results['route']['locations'][i]['latLng']['lat'])
            latlong_list.append(results['route']['locations'][i]['latLng']['lng'])
            
        final_latlong_list = []
        for i in range(0, len(latlong_list), 2):
            temp_str = ''
            if i == len(latlong_list) - 2 :
                temp_str += str(str(latlong_list[i]) + ',' + str(latlong_list[i+1]))

            else:
                temp_str += str(str(latlong_list[i]) + ',' + str(latlong_list[i+1])) + ','
                
            final_latlong_list.append(temp_str)
            
        return final_latlong_list
    
    except:
        return 'NO ROUTE FOUND'

def elevation_url(base_url: str, location: list, class_key: str) -> list:
    """
    Calls the get_results function for the locations in the wanted api because
    the elevation api requires a coordinates for query parameters.
    """
    distance_base_url = 'http://open.mapquestapi.com/directions/v2'
    distance_class_key = '/route?'
    temp_dict = get_results(complete_url(distance_base_url, location, distance_class_key))
    latlong_list = get_latlong_list(temp_dict)
    if latlong_list == 'NO ROUTE FOUND':
        return 'NO ROUTE FOUND'

    
    elevation_url_list = []
    for i in range(len(latlong_list)):
        query_parameters = [
            ('key', MAPQUEST_API_KEY),
            ('latLngCollection', latlong_list[i]),
            ('unit', 'f')
        ]
        temp_url = base_url + class_key + urllib.parse.urlencode(query_parameters)
        elevation_url_list.append(temp_url)

    return elevation_url_list

def get_results(url: str) -> dict:
    """
    Take the url generated by the two url functions and generates the api for the code.
    """
    response = None
    try:
        response = urllib.request.urlopen(url)
        json_text = response.read().decode(encoding = 'utf-8')
        return json.loads(json_text)
    
    finally:
        if response != None:
            response.close()
            




